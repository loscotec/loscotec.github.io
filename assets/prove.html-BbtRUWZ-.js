import{_ as b,c as g,d as o,e,a as n,f as p,b as a,r as c,o as h}from"./app-Bdw6qP9m.js";const f={};function y(T,s){const u=c("CapImg"),r=c("NumCapImg"),d=c("NumImg"),k=c("rk-img"),v=c("CodeTabs"),m=c("Tabs"),t=c("Badge");return h(),g("div",null,[s[14]||(s[14]=o('<h1 id="prove-varie" tabindex="-1"><a class="header-anchor" href="#prove-varie"><span>Prove varie</span></a></h1><h2 id="status" tabindex="-1"><a class="header-anchor" href="#status"><span>Status</span></a></h2><p>Darkmode: $isDarkmode</p><h2 id="links" tabindex="-1"><a class="header-anchor" href="#links"><span>Links</span></a></h2><p><a href="https://www.ducatienergia.com/" target="_blank">Meshtastic in a new tab</a></p><p><a href="https://www.ducatienergia.com/">Meshtastic in the same page</a></p><h2 id="images" tabindex="-1"><a class="header-anchor" href="#images"><span>Images</span></a></h2>',7)),e(u,{src:"/images/clip_image004.jpg",caption:"Caption Example"}),s[15]||(s[15]=n("hr",null,null,-1)),e(r,{src:"/images/clip_image004.jpg",caption:"Caption Example"}),s[16]||(s[16]=n("hr",null,null,-1)),e(d,{src:"/images/clip_image004.jpg",caption:"Caption Example"}),s[17]||(s[17]=o(`<hr><hr><h2 id="codice" tabindex="-1"><a class="header-anchor" href="#codice"><span>Codice</span></a></h2><p>Linea di codice:</p><p><code>Codice</code></p><p><code>seconda linea codice</code></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Blocco codice</span>
<span class="line"></span>
<span class="line">su più </span>
<span class="line"></span>
<span class="line">linee</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>$$ sqrt(3/(10+2)) $$</p>`,8)),e(k,{src:"/assets/images/wisduo/rak3172-module/quickstart/preferences.png",width:"100%",caption:"Arduino preferences"}),s[18]||(s[18]=o(`<div class="hint-container warning"><p class="hint-container-title">ATTENZIONE⚠️</p><p>This is a warning</p></div><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>This is a warning</p></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>This is a tip</p></div><div class="hint-container caution"><p class="hint-container-title">Caution</p><p>This is a dangerous warning</p></div><div class="hint-container info"><p class="hint-container-title">Info</p><p>This is an information.</p></div><div class="hint-container important"><p class="hint-container-title">Important</p><p>This is an important message</p></div><div class="hint-container note"><p class="hint-container-title">Note</p><p>This is a note</p></div><details class="hint-container details"><summary>Details</summary><p>This is a details block</p></details><details class="hint-container details"><summary>Expand for full code</summary><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  Serial1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">115200</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// use Serial1 for UART1 and Serial for UART2</span></span>
<span class="line">                         <span class="token comment">// you can designate separate baudrate for each.</span></span>
<span class="line">  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">115200</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  Serial1<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;RAK3172 UART1 TEST!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;RAK3172 UART2 TEST!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// delay for 1 second</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,9)),e(v,{id:"91",data:[{id:"JavaScript"},{id:"TypeScript"}]},{title0:p(({value:i,isActive:l})=>s[0]||(s[0]=[a("JavaScript")])),title1:p(({value:i,isActive:l})=>s[1]||(s[1]=[a("TypeScript")])),tab0:p(({value:i,isActive:l})=>s[2]||(s[2]=[n("div",{class:"language-javascript line-numbers-mode","data-highlighter":"prismjs","data-ext":"js","data-title":"js"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"const"),a(" name "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token string"},"'VuePress'")]),a(`
`),n("span",{class:"line"},[a("console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token string"},"Hello, "),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),a("name"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token string"},"!"),n("span",{class:"token template-punctuation string"},"`")]),n("span",{class:"token punctuation"},")")]),a(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),tab1:p(({value:i,isActive:l})=>s[3]||(s[3]=[n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts","data-title":"ts"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"const"),a(" name"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token builtin"},"string"),a(),n("span",{class:"token operator"},"="),a(),n("span",{class:"token string"},"'VuePress'")]),a(`
`),n("span",{class:"line"}),a(`
`),n("span",{class:"line"},[n("span",{class:"token builtin"},"console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token string"},"Hello, "),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),a("name"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token string"},"!"),n("span",{class:"token template-punctuation string"},"`")]),n("span",{class:"token punctuation"},")")]),a(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1}),e(m,{id:"99",data:[{id:"Tab1"},{id:"Tab2"}]},{title0:p(({value:i,isActive:l})=>s[4]||(s[4]=[a("Tab1")])),title1:p(({value:i,isActive:l})=>s[5]||(s[5]=[a("Tab2")])),tab0:p(({value:i,isActive:l})=>s[6]||(s[6]=[n("p",null,"This is the content of Tab1.",-1),n("div",{class:"language-javascript line-numbers-mode","data-highlighter":"prismjs","data-ext":"js","data-title":"js"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[a("console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'Hello, VuePress!'"),n("span",{class:"token punctuation"},")")]),a(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"})])],-1)])),tab1:p(({value:i,isActive:l})=>s[7]||(s[7]=[n("p",null,"This is the content of Tab2.",-1),n("ul",null,[n("li",null,"List item 1"),n("li",null,"List item 2"),n("li",null,"List item 3")],-1)])),_:1}),n("ul",null,[n("li",null,[s[8]||(s[8]=a("VuePress - ")),e(t,{type:"tip",text:"v2",vertical:"top"})]),n("li",null,[s[9]||(s[9]=a("VuePress - ")),e(t,{type:"warning",text:"v2",vertical:"middle"})]),n("li",null,[s[10]||(s[10]=a("VuePress - ")),e(t,{type:"danger",text:"v2",vertical:"bottom"})]),n("li",null,[s[11]||(s[11]=a("VuePress - ")),e(t,{type:"important",text:"v2",vertical:"middle"})]),n("li",null,[s[12]||(s[12]=a("VuePress - ")),e(t,{type:"info",text:"v2",vertical:"middle"})]),n("li",null,[s[13]||(s[13]=a("VuePress - ")),e(t,{type:"note",text:"vtop",vertical:"top"}),e(t,{type:"note",text:"vmiddle",vertical:"middle"}),e(t,{type:"note",text:"vbottom",vertical:"bottom"})])]),s[19]||(s[19]=o(`<h3 id="test-html-embedded" tabindex="-1"><a class="header-anchor" href="#test-html-embedded"><span>Test HTML embedded</span></a></h3><details><summary align="right">dettagli</summary><span><p>Al presente paragrafo è indicata la documentazione di supporto alla progettazione ritenuta particolarmente rilevante. Non è quindi da considerarsi un elenco esaustivo dei documenti contenuti nella cartella di riferimento.</p><p>Tale documentazione è archiviata nella cartella di progetto <b><i>2 Materiale di Supporto</i></b>, salvo diversamente specificato.</p><p>Esempi in <i>IO 01 Archiviazione Progetti</i>.</p></span></details> #### <div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  Serial1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">115200</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// use Serial1 for UART1 and Serial for UART2</span></span>
<span class="line">                         <span class="token comment">// you can designate separate baudrate for each.</span></span>
<span class="line">  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">115200</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  Serial1<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;RAK3172 UART1 TEST!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;RAK3172 UART2 TEST!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// delay for 1 second</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> prova</span>
<span class="line">i <span class="token operator">=</span> <span class="token number">10</span></span>
<span class="line"><span class="token keyword">if</span> a <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token builtin">open</span><span class="token punctuation">(</span>lillo<span class="token punctuation">)</span></span>
<span class="line">    doon<span class="token punctuation">(</span>lillo<span class="token punctuation">)</span></span>
<span class="line">    close<span class="token punctuation">(</span>lillo<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line"><span class="token keyword">return</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Wire.h&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  Wire<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">115200</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>Serial<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\\nI2C Scanner&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  byte error<span class="token punctuation">,</span> address<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">int</span> nDevices<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Scanning...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  nDevices <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span><span class="token punctuation">(</span>address <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> address <span class="token operator">&lt;</span> <span class="token number">127</span><span class="token punctuation">;</span> address<span class="token operator">++</span> <span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// The i2c_scanner uses the return value of</span></span>
<span class="line">    <span class="token comment">// the Write.endTransmission to see if</span></span>
<span class="line">    <span class="token comment">// a device did acknowledge to the address.</span></span>
<span class="line">    Wire<span class="token punctuation">.</span><span class="token function">beginTransmission</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    error <span class="token operator">=</span> Wire<span class="token punctuation">.</span><span class="token function">endTransmission</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;I2C device found at address 0x&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>address<span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">)</span></span>
<span class="line">        Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>address<span class="token punctuation">,</span>HEX<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;  !&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      nDevices<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;Unknown error at address 0x&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>address<span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">)</span></span>
<span class="line">        Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>address<span class="token punctuation">,</span>HEX<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>nDevices <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;No I2C devices found\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">else</span></span>
<span class="line">    Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;done\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// wait 5 seconds for next scan</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6))])}const S=b(f,[["render",y],["__file","prove.html.vue"]]),x=JSON.parse('{"path":"/datasheets/prove.html","title":"Prove varie","lang":"it","frontmatter":{"lastUpdated":true,"// sidebar":false,"pageClass":"numbered-images"},"headers":[{"level":2,"title":"Status","slug":"status","link":"#status","children":[]},{"level":2,"title":"Links","slug":"links","link":"#links","children":[]},{"level":2,"title":"Images","slug":"images","link":"#images","children":[]},{"level":2,"title":"Codice","slug":"codice","link":"#codice","children":[{"level":3,"title":"Test HTML embedded","slug":"test-html-embedded","link":"#test-html-embedded","children":[]}]}],"git":{},"filePathRelative":"datasheets/prove.md"}');export{S as comp,x as data};
